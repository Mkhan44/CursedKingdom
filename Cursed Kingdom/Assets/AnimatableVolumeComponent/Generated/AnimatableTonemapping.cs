// <auto-generated />

using System;
using UnityEngine;
using UnityEngine.Rendering;

namespace TsukimiNeko.AnimatableVolumeComponent
{
    [AnimatableOf(typeof(UnityEngine.Rendering.Universal.Tonemapping))]
    [DisallowMultipleComponent]
    public class AnimatableTonemapping : AnimatableVolumeComponentBase
    {
        public override Type TargetType { get; } = typeof(UnityEngine.Rendering.Universal.Tonemapping);

        public bool override_mode;
        public UnityEngine.Rendering.Universal.TonemappingMode mode;
        public bool override_neutralHDRRangeReductionMode;
        public UnityEngine.Rendering.Universal.NeutralRangeReductionMode neutralHDRRangeReductionMode;
        public bool override_acesPreset;
        public UnityEngine.Rendering.Universal.HDRACESPreset acesPreset;
        public bool override_hueShiftAmount;
        public System.Single hueShiftAmount;
        public bool override_detectPaperWhite;
        public System.Boolean detectPaperWhite;
        public bool override_paperWhite;
        public System.Single paperWhite;
        public bool override_detectBrightnessLimits;
        public System.Boolean detectBrightnessLimits;
        public bool override_minNits;
        public System.Single minNits;
        public bool override_maxNits;
        public System.Single maxNits;


        private void WriteToVolumeComponent(UnityEngine.Rendering.Universal.Tonemapping volumeComponent)
        {
            if (!volumeComponent) return;

            volumeComponent.active = active;
            volumeComponent.mode.overrideState = override_mode;
            volumeComponent.mode.value = mode;
            volumeComponent.neutralHDRRangeReductionMode.overrideState = override_neutralHDRRangeReductionMode;
            volumeComponent.neutralHDRRangeReductionMode.value = neutralHDRRangeReductionMode;
            volumeComponent.acesPreset.overrideState = override_acesPreset;
            volumeComponent.acesPreset.value = acesPreset;
            volumeComponent.hueShiftAmount.overrideState = override_hueShiftAmount;
            volumeComponent.hueShiftAmount.value = hueShiftAmount;
            volumeComponent.detectPaperWhite.overrideState = override_detectPaperWhite;
            volumeComponent.detectPaperWhite.value = detectPaperWhite;
            volumeComponent.paperWhite.overrideState = override_paperWhite;
            volumeComponent.paperWhite.value = paperWhite;
            volumeComponent.detectBrightnessLimits.overrideState = override_detectBrightnessLimits;
            volumeComponent.detectBrightnessLimits.value = detectBrightnessLimits;
            volumeComponent.minNits.overrideState = override_minNits;
            volumeComponent.minNits.value = minNits;
            volumeComponent.maxNits.overrideState = override_maxNits;
            volumeComponent.maxNits.value = maxNits;

        }

        private void ReadFromVolumeComponent(UnityEngine.Rendering.Universal.Tonemapping volumeComponent)
        {
            if (!volumeComponent) return;

            active = volumeComponent.active;
            override_mode = volumeComponent.mode.overrideState;
            mode = volumeComponent.mode.value;
            override_neutralHDRRangeReductionMode = volumeComponent.neutralHDRRangeReductionMode.overrideState;
            neutralHDRRangeReductionMode = volumeComponent.neutralHDRRangeReductionMode.value;
            override_acesPreset = volumeComponent.acesPreset.overrideState;
            acesPreset = volumeComponent.acesPreset.value;
            override_hueShiftAmount = volumeComponent.hueShiftAmount.overrideState;
            hueShiftAmount = volumeComponent.hueShiftAmount.value;
            override_detectPaperWhite = volumeComponent.detectPaperWhite.overrideState;
            detectPaperWhite = volumeComponent.detectPaperWhite.value;
            override_paperWhite = volumeComponent.paperWhite.overrideState;
            paperWhite = volumeComponent.paperWhite.value;
            override_detectBrightnessLimits = volumeComponent.detectBrightnessLimits.overrideState;
            detectBrightnessLimits = volumeComponent.detectBrightnessLimits.value;
            override_minNits = volumeComponent.minNits.overrideState;
            minNits = volumeComponent.minNits.value;
            override_maxNits = volumeComponent.maxNits.overrideState;
            maxNits = volumeComponent.maxNits.value;

        }

        private void Reset()
        {
            var volume = GetComponent<Volume>();
            if (!volume || !volume.sharedProfile || !volume.sharedProfile.TryGet<UnityEngine.Rendering.Universal.Tonemapping>(out var volumeComponent)) return;

            ReadFromVolumeComponent(volumeComponent);
        }

        public override void WriteToVolumeComponent()
        {
            if (!volumeHelper.TryGet<UnityEngine.Rendering.Universal.Tonemapping>(out var volumeComponent)) return;

            WriteToVolumeComponent(volumeComponent);
        }

        public override void ReadFromVolumeComponent()
        {
            if (!volumeHelper.TryGet<UnityEngine.Rendering.Universal.Tonemapping>(out var volumeComponent)) return;

            ReadFromVolumeComponent(volumeComponent);
        }
    }
}
